generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TokenTypes {
  MagicLogin
  Refresh
  ConfirmEmail
  ResetPassword
}

enum CustomFieldTypes {
  String
  Int
  Boolean
}

enum CustomFieldRelationsTypes {
  User
}

enum ProjectConfigRelationTypes {
  CustomFields
  UserRoles
}

enum EmailTemplates {
  Welcome
  MagicLink
  ConfirmEmail
  ForgotPassword
}

model User {
  id                String             @id @default(uuid())
  fullName          String?
  email             String
  profilePicture    String?
  password          String?
  lastSignIn        DateTime?
  thonLabsUser      Boolean            @default(false)
  active            Boolean            @default(true)
  emailConfirmed    Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  environment       Environment?       @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId     String?
  role              Role?              @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId            String?
  projects          Project[]
  userSubscriptions UserSubscription[]

  @@map("users")
}

model Project {
  id                  String                       @id
  appName             String
  active              Boolean                      @default(true)
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  userOwner           User                         @relation(fields: [userOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userOwnerId         String
  environments        Environment[]
  environmentsConfigs ProjectConfigOnEnvironment[]
  subscriptions       Subscription[]

  @@map("projects")
}

model CustomField {
  id           String                    @id @default(uuid())
  name         String
  type         CustomFieldTypes
  relationType CustomFieldRelationsTypes

  @@map("custom_fields")
}

model Role {
  id    String @id
  name  String
  users User[]

  @@map("roles")
}

model Subscription {
  id                            String             @id
  name                          String
  price                         Float
  paymentProviderSubscriptionId String?
  project                       Project            @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId                     String
  userSubscriptions             UserSubscription[]

  @@map("subscriptions")
}

model UserSubscription {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String?

  @@map("users_subscriptions")
}

model Environment {
  id                     String   @id
  name                   String
  active                 Boolean  @default(true)
  publicKey              String   @unique
  secretKey              String   @unique
  authKey                String
  tokenExpiration        String   @default("1d")
  refreshTokenExpiration String?  @default("10d")
  appURL                 String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  project         Project                      @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId       String
  users           User[]
  projectConfigs  ProjectConfigOnEnvironment[]
  emailsDomains   EmailDomain[]
  emailsTemplates EmailTemplate[]

  @@map("environments")
}

model ProjectConfigOnEnvironment {
  id            String                     @default(uuid())
  environmentId String
  active        Boolean                    @default(true)
  projectId     String
  relationId    String
  relationType  ProjectConfigRelationTypes

  environment Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([environmentId, projectId])
  @@map("projects_configs_on_environments")
}

model EmailTemplate {
  id            String         @id @default(uuid())
  type          EmailTemplates
  name          String
  subject       String
  fromName      String
  fromEmail     String
  content       String         @db.LongText
  preview       String?
  replyTo       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  environment   Environment    @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  @@map("emails_templates")
}

model EmailDomain {
  id            String      @id @default(uuid())
  externalId    String      @unique // Domain ID from Resend
  domain        String      @unique
  region        String
  status        String
  createdAt     DateTime
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  @@map("emails_domains")
}

model TokenStorage {
  token      String     @id
  expires    DateTime
  createdAt  DateTime   @default(now())
  type       TokenTypes
  relationId String

  @@map("tokens_storage")
}
